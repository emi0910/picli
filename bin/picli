#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require "rubygems"
# https://github.com/morgoth/picasa
require "picasa"
require "thor"
require "picli"
require "pp"

module Picasa
  module API
    class Album < Base
      def show_recent(options = {})
        options = options.merge(:kind => 'photo')
        path = "/data/feed/api/user/#{user_id}"
        response = Connection.new.get(path: path, query: options, headers: auth_header)

        Presenter::Album.new(response.parsed_response["feed"])
      end
    end
  end
end


Encoding.default_external="UTF-8"

class PicliCLI < Thor
  ################################################################
  # constants

  DEFAULT_CONFIG_HOME = File.join((ENV["XDG_CONFIG_HOME"] || "~/.config"), "picli")
  DEFAULT_CONFIG_FILE = "config.yml"
  DEFAULT_CONFIG_PATH = File.join(DEFAULT_CONFIG_HOME, DEFAULT_CONFIG_FILE)

  package_name 'PICLI'

  ################################################################
  # class methods

  class << self
    attr_accessor :calendar
    attr_accessor :popular_options
  end

  def self.register_option(name, options)
    @popular_options ||= {}
    @popular_options[name] = options
  end

  def self.named_option(*names)
    names.each do |name|
      method_option name, @popular_options[name]
    end
  end

  ################################################################
  # global options

  class_option :debug,   :desc => "Set debug flag", :type => :boolean
  class_option :profile, :desc => "Set profiler flag", :type => :boolean
  class_option :config,  :desc => "Set config path (default: #{DEFAULT_CONFIG_PATH})", :banner => "FILE"

  check_unknown_options! :except => :completions

  ################################################################
  # frequently used options

  register_option :repository, :desc => "Set PICLI top directory", :banner => "DIRECTORY"
  register_option :calendar,   :desc => "Set source CALENDAR"
  register_option :category,   :desc => "Pick items only in CATEGORY"
  register_option :format,     :desc => "Set printing format", :enum => %w(text mail orgtable emacs icalendar calfw howm json)
  register_option :search,     :desc => "Search items by complex expression"
  register_option :dry_run,    :desc => "Perform a trial run with no changes made", :type => :boolean
  register_option :page,       :desc => "Start page number"

  ################################################################
  # command name mappings

  map ["--version", "-v"] => :version

  map ["--help", "-h"] => :help
  default_command :help

  ################################################################
  # Command: help
  ################################################################

  desc "help [COMMAND]", "Describe available commands or one specific command"
  def help(command = nil)
    super(command)
  end

  ################################################################
  # Command: version
  ################################################################
  desc "version", "Show version"

  def version
    puts Picli::VERSION
  end

  ################################################################
  # Command: completions
  ################################################################
  desc "completions [COMMAND]", "List available commands or options for COMMAND", :hide => true

  long_desc <<-LONGDESC
    List available commands or options for COMMAND
    This is supposed to be a zsh compsys helper"
  LONGDESC

  def completions(*command)
    help = self.class.commands
    global_options = self.class.class_options
    Picli::Command::Completions.new(help, global_options, command, config)
  end

  ################################################################
  # Command: scan
  ################################################################
  desc "debug", "Scan JSON"

  def debug
    # https://developers.google.com/picasa-web/docs/2.0/developers_guide_protocol
    # Listing photos recently uploaded
    # GET https://picasaweb.google.com/data/feed/api/user/userID?kind=photo&max-results=10

    album_list = @client.album.list('kind' => "photo", 'max-results' => 1)
    puts "#{album_list.parsed_body}"
    album_list.entries.each do |a|
      puts a.title
      a.entries.each do |p|
        t = p.media.thumbnails[0]
        puts "<a href=\"#{t.url}\">#{p.title} #{t.width}x#{t.height}</a>"
      end
    end
  end

  ################################################################
  # Command: albums
  ################################################################
  desc "albums", "Scan albums"

  def albums
    album_list = @client.album.list
    album_list.entries.each do |a|
      dump_album(a)
    end
  end

  ################################################################
  # Command: photos in ALBUM
  ################################################################
  desc "photos ALBUM_ID", "scan photos in ALBUM_ID"

  def photos(album_id)
    photos = @client.album.show(album_id)
    photos.entries.each do |p|
      dump_photo(p)
    end
  end

  ################################################################
  # Command: photos in ALBUM
  ################################################################
  desc "html", "Dump photos for each album in HTML format"

  def html
    puts "<html>"
    album_list = @client.album.list
    album_list.entries.each do |a|
      puts "<h2>#{a.title}</h2>"
      photos = @client.album.show(a.id, 'thumbsize' => "104c", 'imgmax' => '1600')
      photos.entries.each do |p|
        t = p.media.thumbnails[0]
        title = p.title.to_s.sub(/\.[^.]*$/, '')
        puts "<a href=\"#{p.content.src}\" title=\"#{title}\"/><img src=\"#{t.url}\" /></a>"
      end
    end
    puts "</html>"
    # => Picasa::Presenter::AlbumList
    # client.album.show("album_id")
    # => Picasa::Presenter::Album
    # client.photo.create("album_id", file_path: "path/to/my-photo.png")
    # => Picasa::Presenter::Photo
  end

  ################################################################
  # Command: show
  ################################################################
  desc "show ALBUM_ID", "Show article found by ALBUM_ID"

  def show(album_id)
    album = @client.album.show(album_id)
    album.photos.each do |p|
      puts ">>>>>>>>>>>>>>>>>>>>>"
      puts "title               #{p.title}"
      puts "id                  #{p.id}"
      puts "album_id            #{p.album_id}"
      puts "checksum            #{p.checksum}"
      puts "width,height,size   #{p.width},#{p.height},#{p.size}"
      puts "latitude,longitude  #{p.latitude},#{p.longitude}"
      puts "published           #{p.published}"
      puts "timestamp           #{p.timestamp} (#{Time.at(p.timestamp.to_i)})"
      puts "summary             #{p.summary}"

      puts "access              #{p.access}"
      puts "license             #{p.license}"
      puts "comment_count       #{p.comment_count}"
      puts "commenting_enabled  #{p.commenting_enabled}"
      puts "etag                #{p.etag}"
      puts "image_version       #{p.image_version}"
      p.links.each do |link|
        puts "  href              #{link.href}"
      end
      puts "media               #{p.media}"
      p.media.thumbnails.each do |t|
        puts "THUMBNAIL height,width = #{t.height},#{t.width}"
        puts "THUMBNAIL url = #{t.url}"
      end
      puts "updated             #{p.updated}"
      puts "video_status        #{p.video_status}"
      puts "exif                #{p.exif}"
      puts "content             #{p.content}"
    end
    puts "<<<<<<<<<<<<<<<<<<<<"
  end

  ################################################################
  # Command: recent
  ################################################################
  desc "recent", "Show recent updated photos"

  named_option :page

  def recent
    page = (options[:page] || 1).to_i
    page_size = 100
    start_index = (page.to_i - 1) * page_size + 1
    album = @client.album.show_recent('thumbsize' => "128c", 'start-index' => start_index, 'max-results' => page_size)

    album.photos.entries.each do |p|
      dump_photo(p)
    end
  end

  ################################################################
  # Command: thumbnails
  ################################################################
  desc "thumbnails [ALBUM_ID]", "Show thumbnails in ALBUM_ID"

  named_option :page

  def thumbnails(album_id = nil)
    page = (options[:page] || 1).to_i
    page_size = 100
    start_index = (page.to_i - 1) * page_size + 1

    if album_id
      album = @client.album.show(album_id, 'thumbsize' => "128c", 'start-index' => start_index, 'max-results' => page_size)
    else
      album = @client.album.show_recent('thumbsize' => "128c", 'start-index' => start_index, 'max-results' => page_size)
    end

    album.photos.each_with_index do |p,i|
      # p.links.each do |link|
      #   puts "photo.href #{link.href}"
      #   puts "photo.rel  #{link.rel}"
      #   puts "photo.type #{link.href}"
      # end
      p.media.thumbnails.each do |t|
        puts "<img src=\"#{t.url}\" />(#{start_index + i}) #{p.title} #{t.width}x#{t.height}<br/>"
      end
    end
  end

  ################################################################
  # add some hooks to Thor

  no_commands do
    def invoke_command(command, *args)
      setup_global_options unless command.name == "init"
      result = super
      teardown
      result
    end
  end

  ################################################################
  # private

  private

  def dump_photo(p)
    puts "-----------------------"
    puts "Title: #{p.title}"
    puts "Content: #{p.content.src}"
    p.media.thumbnails.each do |t|
      puts "Thumbnail: #{t.url}"
    end
  end

  def dump_album(a)
    puts "---------------------------"
    puts "Id: #{a.id}"
    puts "Title: #{a.title}"
    puts "Name: #{a.name}"
    puts "Nickname: #{a.nickname}"
    puts "Summary: #{a.summary}"
    puts "NumPhotos: #{a.numphotos}"
    puts "Location: #{a.location}"
    puts "TimeStamp: #{a.timestamp}"
    puts "Updated: #{a.updated}"
    puts "Published: #{a.published}"
  end

  def exit_on_error(&block)
    begin
      yield if block_given?
    rescue Picli::ConfigurationError => e
      STDERR.print "ERROR: #{e.message}.\n"
      exit 1
    end
  end

  attr_reader :builder, :config, :calendar

  def setup_global_options
    token = "xxxxxxxxxxxxxx"
    @client = ::Picasa::Client.new(user_id: "xxxxxxxxxxx@gmail.com", access_token: token)
  end

  def load_plugins
  end

  def teardown
  end

  def symbolize_keys(hash)
    Hash[hash.map {|k,v| [k.to_sym, v]}]
  end
end

PicliCLI.start(ARGV)
